package de.uulm.se.couchedit.model.base.probability

import de.uulm.se.couchedit.model.Copyable

/**
 * Contains all probability types that an Element can have
 *
 * @see [de.uulm.se.couchedit.model.base.Element.probability]
 */
sealed class ProbabilityInfo : Copyable {
    abstract override fun copy(): ProbabilityInfo

    /**
     * Class for objects marking that an Element has been generated based on other Elements
     */
    class Generated(initialProbability: Double) : ProbabilityInfo() {
        var probability = initialProbability
            set(value) {
                if (value > 1 || value <= 0) {
                    throw IllegalArgumentException("probability value must be in (0,1]")
                }

                field = value
            }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false

            other as Generated

            if (probability != other.probability) return false

            return true
        }

        override fun hashCode(): Int {
            return probability.hashCode()
        }

        override fun toString(): String = "Gen($probability)"

        override fun copy(): Generated {
            return Generated(probability)
        }
    }

    /**
     * Class for objects that the user has generated by an explicit action in the concrete / abstract syntax.
     *
     * Attention: By design, after an element has been marked as Explicit, there is no way back, i.e. this Element
     *            must not be re-set to a [Generated] probability level!
     */
    object Explicit : ProbabilityInfo() {
        override fun toString(): String = "Expl"

        override fun copy(): Explicit {
            return this
        }
    }
}
